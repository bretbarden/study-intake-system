{"ast":null,"code":"var _jsxFileName = \"/Users/bretbarden/Development/code/phase-2/study-intake-system/src/components/ParticipantJailStatusButton.jsx\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ParticipantJailStatusButton({\n  inmateData,\n  setInmateData,\n  currentInmateId,\n  setCurrentInmateId,\n  participantObj\n}) {\n  // In the fetch, use if/then logic so that it doesn't fetch if there is no inmateId\n  const handleFetchData = async () => {\n    console.log(participantObj.inmateid);\n    if (participantObj.inmateid.trim() === '') {\n      return;\n    }\n    try {\n      const response = await fetch(`https://data.cityofnewyork.us/resource/7479-ugqb.json?inmateid=${currentInmateId}&$$app_token=521Ni3NMNKgfdeYfAhkt5Uj0M`);\n      const data = await response.json();\n      setInmateData(data[0]); // Assuming the API returns an array with one matching inmate. If it does not, will need to modify this line.\n    } catch (error) {\n      console.error('Error in fetch:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFetchData,\n      children: \"Fetch Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), inmateData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Inmate Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(inmateData, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n_c = ParticipantJailStatusButton;\nexport default ParticipantJailStatusButton;\nvar _c;\n$RefreshReg$(_c, \"ParticipantJailStatusButton\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ParticipantJailStatusButton","inmateData","setInmateData","currentInmateId","setCurrentInmateId","participantObj","handleFetchData","console","log","inmateid","trim","response","fetch","data","json","error","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/bretbarden/Development/code/phase-2/study-intake-system/src/components/ParticipantJailStatusButton.jsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction ParticipantJailStatusButton( { inmateData, setInmateData, currentInmateId, setCurrentInmateId, participantObj}) {\n\n    \n    // In the fetch, use if/then logic so that it doesn't fetch if there is no inmateId\n    const handleFetchData = async () => {\n        console.log(participantObj.inmateid)\n        if (participantObj.inmateid.trim() === '') {\n        return;\n        }\n    \n        try {\n        const response = await fetch(`https://data.cityofnewyork.us/resource/7479-ugqb.json?inmateid=${currentInmateId}&$$app_token=521Ni3NMNKgfdeYfAhkt5Uj0M`);\n        const data = await response.json();\n        setInmateData(data[0]); // Assuming the API returns an array with one matching inmate. If it does not, will need to modify this line.\n        } catch (error) {\n        console.error('Error in fetch:', error);\n        }\n    };\n    \n    \n    \n    return (\n        <div>\n            <button onClick={handleFetchData}>Fetch Data</button>\n            {inmateData && (\n                <div>\n                <h2>Inmate Information</h2>\n                <pre>{JSON.stringify(inmateData, null, 2)}</pre>\n                </div>\n            )}\n        </div>\n    );\n}\n      \n\n\nexport default ParticipantJailStatusButton\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,2BAA2BA,CAAE;EAAEC,UAAU;EAAEC,aAAa;EAAEC,eAAe;EAAEC,kBAAkB;EAAEC;AAAc,CAAC,EAAE;EAGrH;EACA,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChCC,OAAO,CAACC,GAAG,CAACH,cAAc,CAACI,QAAQ,CAAC;IACpC,IAAIJ,cAAc,CAACI,QAAQ,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC3C;IACA;IAEA,IAAI;MACJ,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,kEAAiET,eAAgB,wCAAuC,CAAC;MACvJ,MAAMU,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCZ,aAAa,CAACW,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;MAChBR,OAAO,CAACQ,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvC;EACJ,CAAC;EAID,oBACIhB,OAAA;IAAAiB,QAAA,gBACIjB,OAAA;MAAQkB,OAAO,EAAEX,eAAgB;MAAAU,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACpDpB,UAAU,iBACPF,OAAA;MAAAiB,QAAA,gBACAjB,OAAA;QAAAiB,QAAA,EAAI;MAAkB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BtB,OAAA;QAAAiB,QAAA,EAAMM,IAAI,CAACC,SAAS,CAACtB,UAAU,EAAE,IAAI,EAAE,CAAC;MAAC;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACG,EAAA,GAhCQxB,2BAA2B;AAoCpC,eAAeA,2BAA2B;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}